FUNCTION (GITTEST_COMMON_SET_PLATFORM)
  SET(GITTEST_PLATFORM_WIN NO)
  SET(GITTEST_PLATFORM_NIX NO)
  IF (WIN32 AND (NOT (MINGW OR MSVC)))
    MESSAGE(FATAL_ERROR "Windows (WIN32 defined) but neither MINGW or MSVC?")
  ENDIF ()
  IF ((WIN32 AND MINGW) OR (WIN32 AND MSVC))
    SET(GITTEST_PLATFORM_WIN YES)
  ELSEIF (UNIX)
    SET(GITTEST_PLATFORM_NIX YES)
  ELSE ()
    MESSAGE(FATAL_ERROR "Untested platform?")
  ENDIF ()
  SET(GITTEST_PLATFORM_WIN "${GITTEST_PLATFORM_WIN}" PARENT_SCOPE)
  SET(GITTEST_PLATFORM_NIX "${GITTEST_PLATFORM_NIX}" PARENT_SCOPE)
ENDFUNCTION ()

FUNCTION (GITTEST_COMMON_SET_PLATFORM_PLAT)
  GITTEST_COMMON_ENSURE_PLATFORM()
  IF (GITTEST_PLATFORM_WIN)
    SET(GITTEST_PLATFORM_PLAT WIN PARENT_SCOPE)
  ELSEIF (GITTEST_PLATFORM_NIX)
    SET(GITTEST_PLATFORM_PLAT NIX PARENT_SCOPE)
  ENDIF()
ENDFUNCTION ()

FUNCTION (GITTEST_COMMON_SET_COMPILER)
  SET(GITTEST_COMPILER_GCC  NO)
  SET(GITTEST_COMPILER_MSVC NO)
  IF (MINGW)
    SET(GITTEST_COMPILER_GCC YES)
  ELSEIF (MSVC)
    SET(GITTEST_COMPILER_MSVC YES)
  ELSE ()
    MESSAGE(FATAL_ERROR "Unrecognized compiler?")
  ENDIF ()
  SET(GITTEST_COMPILER_GCC  "${GITTEST_COMPILER_GCC}"  PARENT_SCOPE)
  SET(GITTEST_COMPILER_MSVC "${GITTEST_COMPILER_MSVC}" PARENT_SCOPE)
ENDFUNCTION ()

FUNCTION (GITTEST_COMMON_ENSURE_PLATFORM)
  IF (ARGC LESS 1)
    IF (NOT (GITTEST_PLATFORM_WIN OR GITTEST_PLATFORM_NIX))
      MESSAGE(FATAL_ERROR "GITTEST_PLATFORM_ not defined?")
    ENDIF ()
  ELSEIF (ARGC EQUAL 1)
    IF (NOT GITTEST_PLATFORM_${ARGV0})
      MESSAGE(FATAL_ERROR "GITTEST_PLATFORM_[${ARGV0}] not defined?")
    ENDIF ()
  ELSE ()
    MESSAGE(FATAL_ERROR "Argument count")
  ENDIF ()
ENDFUNCTION ()

FUNCTION (GITTEST_COMMON_SET_DEP_VARS)
  GITTEST_COMMON_ENSURE_PLATFORM()
  IF (GITTEST_PLATFORM_WIN)
    GITTEST_COMMON_SET_DEP_VARS_WIN()
  ELSEIF (GITTEST_PLATFORM_NIX)
    GITTEST_COMMON_SET_DEP_VARS_NIX()
  ENDIF ()
  SET(GITTEST_DEP_INCLUDE_DIRS "${GITTEST_DEP_INCLUDE_DIRS}" PARENT_SCOPE)
  SET(GITTEST_DEP_LIBRARIES "${GITTEST_DEP_LIBRARIES}" PARENT_SCOPE)
ENDFUNCTION ()

FUNCTION (GITTEST_COMMON_SET_DEP_VARS_WIN)
  GITTEST_COMMON_ENSURE_PLATFORM(WIN)
  # search for all needed packages
    FIND_PACKAGE(LibGit2 REQUIRED)
  ## ZLIB is a dependency of LibGit2
  ##   if LibGit2 does not find ZLIB it will use bundled (happens on windows/MSVC)
  IF (NOT GITTEST_COMPILER_MSVC)
    FIND_PACKAGE(ZLIB REQUIRED)
  ENDIF ()
  FIND_PACKAGE(ENet REQUIRED)
  FIND_PACKAGE(Shlwapi REQUIRED)
  # set output variables
  SET(GITTEST_DEP_INCLUDE_DIRS
    ${LIBGIT2_INCLUDE_DIR}
    ${ENET_INCLUDE_DIR}
    ${ZLIB_INCLUDE_DIR}
  PARENT_SCOPE)
  SET (GITTEST_DEP_LIBRARIES
    ${LIBGIT2_LIBRARIES}
    ${ENET_LIBRARIES}
    # ZLIB must be on the link list AFTER LibGit2 to resolve symbols
    ${ZLIB_LIBRARIES}
    ${SHLWAPI_LIBRARIES}
  PARENT_SCOPE)
ENDFUNCTION ()

FUNCTION (GITTEST_COMMON_SET_DEP_VARS_NIX)
  GITTEST_COMMON_ENSURE_PLATFORM(NIX)
  # search for all needed packages
    FIND_PACKAGE(LibGit2 REQUIRED)
  ## ZLIB is a dependency of LibGit2
  FIND_PACKAGE(ZLIB REQUIRED)
  FIND_PACKAGE(ENet REQUIRED)
  FIND_PACKAGE(Shlwapi REQUIRED)
  # set output variables
  SET(GITTEST_DEP_INCLUDE_DIRS
    ${LIBGIT2_INCLUDE_DIR}
    ${ENET_INCLUDE_DIR}
    ${ZLIB_INCLUDE_DIR}
  PARENT_SCOPE)
  SET (GITTEST_DEP_LIBRARIES
    ${LIBGIT2_LIBRARIES}
    ${ENET_LIBRARIES}
    # ZLIB must be on the link list AFTER LibGit2 to resolve symbols
    ${ZLIB_LIBRARIES}
    ${SHLWAPI_LIBRARIES}
  PARENT_SCOPE)
ENDFUNCTION ()
